/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package exprgenerator;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class App {
    public String getGreeting(String[] grammerDefinitions, String destination) throws IOException {

        var visitorSubClassesMethodTemplate = Files.readString(Paths.get("./visitorInterfaceMethodTemplate.txt")).trim();
        var subclassPropetyInitTemplate = Files.readString(Paths.get("./subclassPropertyInitTemplate.txt")).trim();
        var subclassPropetyTemplate = Files.readString(Paths.get("./subclassPropertyTemplate.txt")).trim();
        var subclassTemplate = Files.readString(Paths.get("./subclassTemplate.txt")).trim();
        var classTemplate = Files.readString(Paths.get("./classTemplate.txt")).trim();

        List<String> subClasses = new ArrayList<>();
        List<String> visitorSubClassesMethods = new ArrayList<>();

        for (String definition : grammerDefinitions) {
            var definitionBreakdown = definition.split(":");
            var subclassName = definitionBreakdown[0].trim();
            var paramterListing = definitionBreakdown[1].trim();

            var propertyData = paramterListing.trim().split(",");

            List<String> subClassProperties = new ArrayList<>();
            List<String> subClassPropertyInitList = new ArrayList<>();

            for (String property : propertyData) {
                var propertyBreakdown = property.trim().split(" ");

                var type = propertyBreakdown[0].trim();
                var name = propertyBreakdown[1].trim();

                subClassProperties.add(subclassPropetyTemplate
                        .replaceAll("\\{subclassPropertyType\\}", type)
                        .replaceAll("\\{subclassPropertyName\\}", name));

                subClassPropertyInitList.add(subclassPropetyInitTemplate
                        .replaceAll("\\{subclassPropertyName\\}", name));
            }

            var properties = String.join(System.lineSeparator(), subClassProperties).replaceAll("\n", "\n\t");
            var propertiesInit = String.join(System.lineSeparator(), subClassPropertyInitList).replaceAll("\n",
                    "\n\t\t");

            var subClass = subclassTemplate
                    .replaceAll("\\{subClassPropertyList\\}", properties)
                    .replaceAll("\\{subClassPropertyInitList\\}", propertiesInit)
                    .replaceAll("\\{subClassName\\}", subclassName)
                    .replaceAll("\\{constructorParameterList\\}", paramterListing);

            var visitorMethod = visitorSubClassesMethodTemplate
                    .replaceAll("\\{subClassName\\}", subclassName);

            visitorSubClassesMethods.add(visitorMethod);
            subClasses.add(subClass);
        }

        var compiledSubClasses = String.join(System.lineSeparator() + System.lineSeparator(), subClasses)
                .replaceAll("\n", "\n\t");

        var compiledVisitorSubClassesMethods = String.join(System.lineSeparator(), visitorSubClassesMethods)
                .replaceAll("\n", "\n\t\t");

        var classResult = classTemplate
                .replaceAll("\\{visitorInterfaceMethods\\}", compiledVisitorSubClassesMethods)
                .replaceAll("\\{subClassListings\\}", compiledSubClasses)
                .replaceAll("\\{className\\}", destination)
                .replaceAll("\\{packageName\\}", "jlox.expression");

        FileWriter writer = new FileWriter("./" + destination + ".java");
        writer.write(classResult);
        writer.flush();
        writer.close();

        return "";
    }

    public static void main(String[] args) throws IOException {
        // print current directory
        System.out.println(System.getProperty("user.dir"));

        String[] exprGrammerDefinitions = {
                "Assign   : Token name, Expr value",
                "Binary   : Expr left, Token operator, Expr right",
                "Grouping : Expr expression",
                "Literal  : Object value",
                "Unary    : Token operator, Expr right",
                "Logical  : Expr left, Token operator, Expr right",
                "Call     : Expr callee, Token paren, List<Expr> arguments",
                "Variable : Token name",
        };

        String[] stmtGrammerDefinitions = {
                "Block      : List<Stmt> statements",
                "Function   : Token name, List<Token> params, List<Stmt> body",
                "IF      : Expr expression, Stmt trueBranch, Stmt falseBranch",
                "Expression : Expr expression",
                "Print      : Expr expression",
                "Return     : Token keyword, Expr value",
                "Var        : Token name, Expr initializer",
                "While      : Expr condition, Stmt body"
        };

        var app = new App();

        app.getGreeting(exprGrammerDefinitions, "Expr");
        app.getGreeting(stmtGrammerDefinitions, "Stmt");
    }
}
